[2025-10-23 14:57:26] [Success] Enabled Query Store for database with optimized settings
[2025-10-23 14:57:26] [Info] Processing database user creation...
[2025-10-23 14:57:26] [Info] Creating database user 'tda001\jf66236' for database 'DB_POD0_CREATEDCVIAPS'
[2025-10-23 14:57:26] [Error] Login 'tda001\jf66236' does not exist on SQL Server instance 's2s00euj\MSS66_DEV'. Create the login first before adding database user.
[2025-10-23 14:57:26] [Warning] Warning: Failed to create user 'tda001\jf66236'. See previous error messages.
[2025-10-23 14:57:26] [Info] Database user creation processing completed
[2025-10-23 14:57:26] [Info] Database 'DB_POD0_CREATEDCVIAPS' configuration summary:
[2025-10-23 14:57:26] [Info]   - Total data files in PRIMARY filegroup: 1
[2025-10-23 14:57:26] [Info]   - Data file location: G:\MSS66_DEV\data
[2025-10-23 14:57:26] [Info]   - Log file location: E:\MSS66_DEV\log
[2025-10-23 14:57:26] [Info]   - Owner: sa
[2025-10-23 14:57:26] [Info]   - Query Store: Enabled
[2025-10-23 14:57:26] [Info]   - Database Users: 1
[2025-10-23 14:57:26] [Success] Database creation completed successfully!



SQL Server Instance Upgrade to version sql 2022:
Assumption: Side by Side Installation
1) Use dbatools for all sql database tasks(no TSQL!)
2) It should be possible to choose what objects to transfer to the target SQl server.
3) It should check the collation of the target server.
4) it should be possible to take encryption and TDE into account.
5) The solution should give a choice to apply the upgrade directly or create an output file for later execution.
6) The solution should have a -Whatif switch
7) The solution should never ever Drop anything, only adding objects.
8) The solution should be flexible enough to choose one or more user databases. 
It should also be possible to include All user databases.
System databases SHOULD NOT BE COPIED OVER.
9) The solution should be idempotent.

Monitoring:
Everything should be logged...
The Logs should also go to the Windows Event Logs.

Post-Upgrade Tasks:
Verify Database Integrity – Run DBCC CHECKDB to detect corruption.
Update Database Compatibility Level
Update statistics
Rebuild indexes


================================================================================
| SQL Server Log Backup Performance Issue - Cohesity Diagnosis Request      |
================================================================================

--- [ BACKGROUND ] ------------------------------------------------------------
SQL Server transaction log backups to \\cohesity\sql_backups\logs are taking
18+ hours (vs. 5 minutes to local disk), causing production risks:
- Transaction logs growing uncontrollably.
- BACKUPIO waits in sp_WhoIsActive.
- RPO violations.

Evidence suggests the bottleneck is on the Cohesity side.

---

--- [ ACTION REQUESTED ] -------------------------------------------------------
Please run the following Cohesity CLI commands and provide outputs to diagnose:

---

### 1. Cluster Health
Command:
  cohesitycli show nodes

Expected Output:
  | Node IP      | CPU % | Memory % | Disk Latency (ms) |
  |--------------|-------|----------|-------------------|
  | 10.0.0.1     | <80%  | <70%     | <20ms             |  <-- Red flag if higher

---

### 2. SMB Share Performance (Critical)
Command:
  cohesitycli show stats --stats_type fs --node <NODE_HOSTING_SQL_BACKUPS> --interval 1h

Expected Output:
  | Metric            | Value   | Threshold | Notes                     |
  |-------------------|---------|-----------|---------------------------|
  | fs_write_latency   | <10ms   | >20ms     | **Bottleneck if high**    |
  | fs_read_latency    | <10ms   | >20ms     |                           |
  | fs_throughput      | >50MB/s | <50MB/s   | **Current: ~5MB/s (slow)**|

---

### 3. Network Performance
Command:
  cohesitycli show stats --stats_type net --node <NODE_HOSTING_SQL_BACKUPS> --interval 1h

Expected Output:
  | Metric          | Value      | Threshold   | Notes                     |
  |-----------------|------------|-------------|---------------------------|
  | net_tx_bytes    | >100MB/s   | <50MB/s     | **Underutilized link**    |
  | net_rx_bytes    | >100MB/s   | <50MB/s     |                           |
  | packet_drops    | 0          | >0          | **Network issues**        |

---

### 4. QoS Policies
Command:
  cohesitycli view qos_policies

Expected Output:
  | Policy Name   | Type   | Limit (MB/s) | Notes                     |
  |---------------|--------|--------------|---------------------------|
  | sql_backups   | SMB    | Unlimited    | **Red flag if <100MB/s**  |

---

### 5. SMB Sessions
Command:
  cohesitycli show smb_sessions

Expected Output:
  | Client IP     | Share Path               | Bytes Written | Throughput  |
  |---------------|--------------------------|---------------|--------------|
  | <SQL_IP>      | \\cohesity\sql_backups   | High          | **<5MB/s**   | <-- Bottleneck

---

### 6. Share Configuration
Command:
  cohesitycli show views --name sql_backups

Expected Output:
  | Setting       | Value      | Required Value | Notes                     |
  |---------------|------------|----------------|---------------------------|
  | Protocol      | SMB 3.1.1  | SMB 3.1.1      | **Downgrade if SMB 1/2**  |
  | Encryption    | Enabled    | Enabled        | compliance            |
  | QoS Policy    | None       | None/Unlimited | **Check for throttling**  |

---

--- [ OBSERVED SYMPTOMS ] -------------------------------------------------------
| Metric               | Local Disk | Cohesity Share | Notes                     |
|----------------------|------------|----------------|---------------------------|
| Log backup time      | 5 min      | 18+ hours      | **300x slower**           |
| Throughput           | 200MB/s    | 5MB/s          | **Cohesity throttling**   |
| BACKUPIO waits       | 0ms        | Persistent     | SQL waiting on I/O        |

---

--- [ REQUEST ] ---------------------------------------------------------------
1. Confirm if Cohesity is throttling SMB traffic (QoS, network, or storage).
2. Check for:
   - SMB protocol misconfiguration (must be 3.1.1).
   - Missing SMB Multichannel.
   - Overloaded storage nodes.
3. Propose fixes:
   - Increase QoS limits for `sql_backups`.
   - Move share to a less loaded node.
   - Enable SMB Multichannel.

**Impact**: Risk of production outage if logs fill up.

**Next Steps**: We’ll divert backups to local disk temporarily if unresolved by [ETA].



Get-SmbClientConfiguration | Select Dialect, EnableMultichannel
Get-SmbServerConfiguration # (Run on Cohesity if possible)


-- Identify long-running log backups
SELECT
    session_id,
    command,
    start_time,
    percent_complete,
    estimated_completion_time,
    wait_type,
    wait_time,
    wait_resource
FROM sys.dm_exec_requests
WHERE command LIKE '%LOG%' AND wait_type = 'BACKUPIO';



---

**SQL Server**: SQLPROD01 (10.0.0.X)
**Cohesity Share**: \\cohesity\sql_backups\logs

SELECT
    r.session_id,
    r.command,
    r.start_time,
    r.percent_complete,
    r.estimated_completion_time,
    DATEADD(ms, r.estimated_completion_time, GETDATE()) AS estimated_end_time,
    DATEDIFF(SECOND, r.start_time, GETDATE()) AS elapsed_time_seconds,
    CASE
        WHEN r.percent_complete > 0 AND DATEDIFF(SECOND, r.start_time, GETDATE()) > 0 THEN
            -- Estimate throughput based on progress and time
            (r.percent_complete / 100.0) * 100 /
            (DATEDIFF(SECOND, r.start_time, GETDATE()) / 60.0)
        ELSE NULL
    END AS estimated_throughput_mb_per_min,
    r.wait_type,
    r.wait_time,
    r.wait_resource,
    t.text AS backup_command,
    -- Get approximate backup size from last successful log backup
    (SELECT TOP 1 backup_size / 1024.0 / 1024.0
     FROM msdb.dbo.backupset
     WHERE database_name = DB_NAME()
     AND type = 'L'
     ORDER BY backup_finish_date DESC) AS last_log_backup_size_mb
FROM sys.dm_exec_requests r
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE r.command LIKE '%LOG%';


